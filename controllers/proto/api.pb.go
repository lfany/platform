// Code generated by protoc-gen-go.
// source: controllers/proto/api.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	controllers/proto/api.proto

It has these top-level messages:
	MirrorFindRequest
	MirrorGetRequest
	MirrorGetResponse
	ServiceGetRequest
	ServiceGetResponse
	Contact
	Service
	Mirror
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type MirrorFindRequest struct {
	ClientToken string `protobuf:"bytes,1,opt,name=client_token,json=clientToken" json:"client_token,omitempty"`
}

func (m *MirrorFindRequest) Reset()                    { *m = MirrorFindRequest{} }
func (m *MirrorFindRequest) String() string            { return proto1.CompactTextString(m) }
func (*MirrorFindRequest) ProtoMessage()               {}
func (*MirrorFindRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MirrorFindRequest) GetClientToken() string {
	if m != nil {
		return m.ClientToken
	}
	return ""
}

type MirrorGetRequest struct {
	Limit  int32 `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
	Offset int32 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
}

func (m *MirrorGetRequest) Reset()                    { *m = MirrorGetRequest{} }
func (m *MirrorGetRequest) String() string            { return proto1.CompactTextString(m) }
func (*MirrorGetRequest) ProtoMessage()               {}
func (*MirrorGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MirrorGetRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *MirrorGetRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type MirrorGetResponse struct {
	Mirrors []*Mirror `protobuf:"bytes,1,rep,name=mirrors" json:"mirrors,omitempty"`
}

func (m *MirrorGetResponse) Reset()                    { *m = MirrorGetResponse{} }
func (m *MirrorGetResponse) String() string            { return proto1.CompactTextString(m) }
func (*MirrorGetResponse) ProtoMessage()               {}
func (*MirrorGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MirrorGetResponse) GetMirrors() []*Mirror {
	if m != nil {
		return m.Mirrors
	}
	return nil
}

type ServiceGetRequest struct {
	Limit  int32 `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
	Offset int32 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
}

func (m *ServiceGetRequest) Reset()                    { *m = ServiceGetRequest{} }
func (m *ServiceGetRequest) String() string            { return proto1.CompactTextString(m) }
func (*ServiceGetRequest) ProtoMessage()               {}
func (*ServiceGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ServiceGetRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ServiceGetRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type ServiceGetResponse struct {
	Services []*Service `protobuf:"bytes,1,rep,name=services" json:"services,omitempty"`
}

func (m *ServiceGetResponse) Reset()                    { *m = ServiceGetResponse{} }
func (m *ServiceGetResponse) String() string            { return proto1.CompactTextString(m) }
func (*ServiceGetResponse) ProtoMessage()               {}
func (*ServiceGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ServiceGetResponse) GetServices() []*Service {
	if m != nil {
		return m.Services
	}
	return nil
}

type Contact struct {
	Id    int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Email string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	Admin bool   `protobuf:"varint,4,opt,name=admin" json:"admin,omitempty"`
}

func (m *Contact) Reset()                    { *m = Contact{} }
func (m *Contact) String() string            { return proto1.CompactTextString(m) }
func (*Contact) ProtoMessage()               {}
func (*Contact) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Contact) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Contact) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Contact) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Contact) GetAdmin() bool {
	if m != nil {
		return m.Admin
	}
	return false
}

type Service struct {
	Id                 int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name               string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Storage            int64  `protobuf:"varint,3,opt,name=storage" json:"storage,omitempty"`
	TrafficConsumption int64  `protobuf:"varint,4,opt,name=traffic_consumption,json=trafficConsumption" json:"traffic_consumption,omitempty"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto1.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Service) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Service) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Service) GetStorage() int64 {
	if m != nil {
		return m.Storage
	}
	return 0
}

func (m *Service) GetTrafficConsumption() int64 {
	if m != nil {
		return m.TrafficConsumption
	}
	return 0
}

type Mirror struct {
	Id               int32    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ContactId        int32    `protobuf:"varint,2,opt,name=contact_id,json=contactId" json:"contact_id,omitempty"`
	Ipv4             string   `protobuf:"bytes,3,opt,name=ipv4" json:"ipv4,omitempty"`
	Ipv6             string   `protobuf:"bytes,4,opt,name=ipv6" json:"ipv6,omitempty"`
	Name             string   `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Domain           string   `protobuf:"bytes,6,opt,name=domain" json:"domain,omitempty"`
	ClientToken      string   `protobuf:"bytes,7,opt,name=client_token,json=clientToken" json:"client_token,omitempty"`
	CreatedAt        int64    `protobuf:"varint,8,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	Bandwidth        int64    `protobuf:"varint,9,opt,name=bandwidth" json:"bandwidth,omitempty"`
	Traffic          int64    `protobuf:"varint,10,opt,name=traffic" json:"traffic,omitempty"`
	AvailableStorage int64    `protobuf:"varint,11,opt,name=available_storage,json=availableStorage" json:"available_storage,omitempty"`
	Service          *Service `protobuf:"bytes,12,opt,name=service" json:"service,omitempty"`
	ServiceEndpoint  *Mirror  `protobuf:"bytes,13,opt,name=service_endpoint,json=serviceEndpoint" json:"service_endpoint,omitempty"`
	LocalDestination string   `protobuf:"bytes,14,opt,name=local_destination,json=localDestination" json:"local_destination,omitempty"`
}

func (m *Mirror) Reset()                    { *m = Mirror{} }
func (m *Mirror) String() string            { return proto1.CompactTextString(m) }
func (*Mirror) ProtoMessage()               {}
func (*Mirror) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Mirror) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Mirror) GetContactId() int32 {
	if m != nil {
		return m.ContactId
	}
	return 0
}

func (m *Mirror) GetIpv4() string {
	if m != nil {
		return m.Ipv4
	}
	return ""
}

func (m *Mirror) GetIpv6() string {
	if m != nil {
		return m.Ipv6
	}
	return ""
}

func (m *Mirror) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Mirror) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *Mirror) GetClientToken() string {
	if m != nil {
		return m.ClientToken
	}
	return ""
}

func (m *Mirror) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Mirror) GetBandwidth() int64 {
	if m != nil {
		return m.Bandwidth
	}
	return 0
}

func (m *Mirror) GetTraffic() int64 {
	if m != nil {
		return m.Traffic
	}
	return 0
}

func (m *Mirror) GetAvailableStorage() int64 {
	if m != nil {
		return m.AvailableStorage
	}
	return 0
}

func (m *Mirror) GetService() *Service {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *Mirror) GetServiceEndpoint() *Mirror {
	if m != nil {
		return m.ServiceEndpoint
	}
	return nil
}

func (m *Mirror) GetLocalDestination() string {
	if m != nil {
		return m.LocalDestination
	}
	return ""
}

func init() {
	proto1.RegisterType((*MirrorFindRequest)(nil), "proto.MirrorFindRequest")
	proto1.RegisterType((*MirrorGetRequest)(nil), "proto.MirrorGetRequest")
	proto1.RegisterType((*MirrorGetResponse)(nil), "proto.MirrorGetResponse")
	proto1.RegisterType((*ServiceGetRequest)(nil), "proto.ServiceGetRequest")
	proto1.RegisterType((*ServiceGetResponse)(nil), "proto.ServiceGetResponse")
	proto1.RegisterType((*Contact)(nil), "proto.Contact")
	proto1.RegisterType((*Service)(nil), "proto.Service")
	proto1.RegisterType((*Mirror)(nil), "proto.Mirror")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ContactService service

type ContactServiceClient interface {
	Create(ctx context.Context, in *Contact, opts ...grpc.CallOption) (*Contact, error)
}

type contactServiceClient struct {
	cc *grpc.ClientConn
}

func NewContactServiceClient(cc *grpc.ClientConn) ContactServiceClient {
	return &contactServiceClient{cc}
}

func (c *contactServiceClient) Create(ctx context.Context, in *Contact, opts ...grpc.CallOption) (*Contact, error) {
	out := new(Contact)
	err := grpc.Invoke(ctx, "/proto.ContactService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ContactService service

type ContactServiceServer interface {
	Create(context.Context, *Contact) (*Contact, error)
}

func RegisterContactServiceServer(s *grpc.Server, srv ContactServiceServer) {
	s.RegisterService(&_ContactService_serviceDesc, srv)
}

func _ContactService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Contact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ContactService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactServiceServer).Create(ctx, req.(*Contact))
	}
	return interceptor(ctx, in, info, handler)
}

var _ContactService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ContactService",
	HandlerType: (*ContactServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ContactService_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controllers/proto/api.proto",
}

// Client API for MirrorService service

type MirrorServiceClient interface {
	Get(ctx context.Context, in *MirrorGetRequest, opts ...grpc.CallOption) (*MirrorGetResponse, error)
	Find(ctx context.Context, in *MirrorFindRequest, opts ...grpc.CallOption) (*Mirror, error)
	Create(ctx context.Context, in *Mirror, opts ...grpc.CallOption) (*Mirror, error)
}

type mirrorServiceClient struct {
	cc *grpc.ClientConn
}

func NewMirrorServiceClient(cc *grpc.ClientConn) MirrorServiceClient {
	return &mirrorServiceClient{cc}
}

func (c *mirrorServiceClient) Get(ctx context.Context, in *MirrorGetRequest, opts ...grpc.CallOption) (*MirrorGetResponse, error) {
	out := new(MirrorGetResponse)
	err := grpc.Invoke(ctx, "/proto.MirrorService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mirrorServiceClient) Find(ctx context.Context, in *MirrorFindRequest, opts ...grpc.CallOption) (*Mirror, error) {
	out := new(Mirror)
	err := grpc.Invoke(ctx, "/proto.MirrorService/Find", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mirrorServiceClient) Create(ctx context.Context, in *Mirror, opts ...grpc.CallOption) (*Mirror, error) {
	out := new(Mirror)
	err := grpc.Invoke(ctx, "/proto.MirrorService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MirrorService service

type MirrorServiceServer interface {
	Get(context.Context, *MirrorGetRequest) (*MirrorGetResponse, error)
	Find(context.Context, *MirrorFindRequest) (*Mirror, error)
	Create(context.Context, *Mirror) (*Mirror, error)
}

func RegisterMirrorServiceServer(s *grpc.Server, srv MirrorServiceServer) {
	s.RegisterService(&_MirrorService_serviceDesc, srv)
}

func _MirrorService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MirrorGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MirrorServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MirrorService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MirrorServiceServer).Get(ctx, req.(*MirrorGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MirrorService_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MirrorFindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MirrorServiceServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MirrorService/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MirrorServiceServer).Find(ctx, req.(*MirrorFindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MirrorService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mirror)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MirrorServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MirrorService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MirrorServiceServer).Create(ctx, req.(*Mirror))
	}
	return interceptor(ctx, in, info, handler)
}

var _MirrorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MirrorService",
	HandlerType: (*MirrorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _MirrorService_Get_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _MirrorService_Find_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _MirrorService_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controllers/proto/api.proto",
}

// Client API for ServiceService service

type ServiceServiceClient interface {
	Get(ctx context.Context, in *ServiceGetRequest, opts ...grpc.CallOption) (*ServiceGetResponse, error)
	Create(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error)
}

type serviceServiceClient struct {
	cc *grpc.ClientConn
}

func NewServiceServiceClient(cc *grpc.ClientConn) ServiceServiceClient {
	return &serviceServiceClient{cc}
}

func (c *serviceServiceClient) Get(ctx context.Context, in *ServiceGetRequest, opts ...grpc.CallOption) (*ServiceGetResponse, error) {
	out := new(ServiceGetResponse)
	err := grpc.Invoke(ctx, "/proto.ServiceService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceServiceClient) Create(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := grpc.Invoke(ctx, "/proto.ServiceService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ServiceService service

type ServiceServiceServer interface {
	Get(context.Context, *ServiceGetRequest) (*ServiceGetResponse, error)
	Create(context.Context, *Service) (*Service, error)
}

func RegisterServiceServiceServer(s *grpc.Server, srv ServiceServiceServer) {
	s.RegisterService(&_ServiceService_serviceDesc, srv)
}

func _ServiceService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ServiceService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServiceServer).Get(ctx, req.(*ServiceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ServiceService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServiceServer).Create(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServiceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ServiceService",
	HandlerType: (*ServiceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ServiceService_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ServiceService_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controllers/proto/api.proto",
}

func init() { proto1.RegisterFile("controllers/proto/api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 696 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x54, 0x5d, 0x6e, 0xd3, 0x4a,
	0x14, 0x96, 0x93, 0x26, 0x69, 0x4e, 0x9a, 0xdc, 0x64, 0x5a, 0xb5, 0x73, 0x73, 0x7b, 0xa5, 0x5c,
	0xbf, 0xdc, 0xa8, 0x48, 0x8d, 0x28, 0xa8, 0x42, 0x15, 0x42, 0xad, 0x0a, 0x54, 0x3c, 0x54, 0x42,
	0x0e, 0x2f, 0x3c, 0x45, 0x53, 0x7b, 0x52, 0x46, 0xd8, 0x33, 0xc1, 0x9e, 0x06, 0x24, 0xc4, 0x0b,
	0x5b, 0x60, 0x0d, 0xac, 0x84, 0x25, 0xb0, 0x05, 0x76, 0xc0, 0x06, 0x90, 0xcf, 0x1c, 0xa7, 0x4e,
	0xd2, 0x07, 0xc4, 0x93, 0xe7, 0x7c, 0xe7, 0xef, 0xfb, 0xce, 0x9c, 0x31, 0xfc, 0x13, 0x1a, 0x6d,
	0x53, 0x13, 0xc7, 0x32, 0xcd, 0x46, 0xb3, 0xd4, 0x58, 0x33, 0x12, 0x33, 0x75, 0x88, 0x27, 0x56,
	0xc3, 0x4f, 0x7f, 0xff, 0xda, 0x98, 0xeb, 0x58, 0xe6, 0x8e, 0x91, 0xd0, 0xda, 0x58, 0x61, 0x95,
	0xd1, 0x99, 0x0b, 0xf2, 0x8f, 0xa1, 0x77, 0xa9, 0xd2, 0xd4, 0xa4, 0xcf, 0x95, 0x8e, 0x02, 0xf9,
	0xee, 0x46, 0x66, 0x96, 0xfd, 0x07, 0x5b, 0x61, 0xac, 0xa4, 0xb6, 0x13, 0x6b, 0xde, 0x4a, 0xcd,
	0xbd, 0x81, 0x37, 0x6c, 0x06, 0x2d, 0x87, 0xbd, 0xca, 0x21, 0xff, 0x14, 0xba, 0x2e, 0xef, 0x42,
	0xda, 0x22, 0x6d, 0x07, 0x6a, 0xb1, 0x4a, 0x94, 0xc5, 0xf8, 0x5a, 0xe0, 0x0c, 0xb6, 0x0b, 0x75,
	0x33, 0x9d, 0x66, 0xd2, 0xf2, 0x0a, 0xc2, 0x64, 0xf9, 0x8f, 0x8b, 0xce, 0x58, 0x21, 0x9b, 0x19,
	0x9d, 0x49, 0xf6, 0x3f, 0x34, 0x12, 0x04, 0x33, 0xee, 0x0d, 0xaa, 0xc3, 0xd6, 0x51, 0xdb, 0xf1,
	0x3c, 0x74, 0xa1, 0x41, 0xe1, 0xf5, 0xcf, 0xa0, 0x37, 0x96, 0xe9, 0x5c, 0x85, 0xf2, 0x8f, 0x09,
	0x9c, 0x02, 0x2b, 0x97, 0x20, 0x06, 0x07, 0xb0, 0x99, 0x39, 0xb4, 0xa0, 0xd0, 0x21, 0x0a, 0x14,
	0x1c, 0x2c, 0xfc, 0xfe, 0x6b, 0x68, 0x9c, 0x1b, 0x6d, 0x45, 0x68, 0x59, 0x07, 0x2a, 0x2a, 0xa2,
	0xbe, 0x15, 0x15, 0x31, 0x06, 0x1b, 0x5a, 0x24, 0x12, 0x5b, 0x36, 0x03, 0x3c, 0xe7, 0xf4, 0x64,
	0x22, 0x54, 0xcc, 0xab, 0x08, 0x3a, 0x23, 0x47, 0x45, 0x94, 0x28, 0xcd, 0x37, 0x06, 0xde, 0x70,
	0x33, 0x70, 0x86, 0xff, 0x01, 0x1a, 0xd4, 0xef, 0xb7, 0x4a, 0x73, 0x68, 0x64, 0xd6, 0xa4, 0xe2,
	0x5a, 0x62, 0xf1, 0x6a, 0x50, 0x98, 0x6c, 0x04, 0xdb, 0x36, 0x15, 0xd3, 0xa9, 0x0a, 0x27, 0xa1,
	0xd1, 0xd9, 0x4d, 0x32, 0xcb, 0xaf, 0x1f, 0x9b, 0x55, 0x03, 0x46, 0xae, 0xf3, 0x5b, 0x8f, 0xff,
	0xad, 0x0a, 0x75, 0x37, 0xed, 0xb5, 0xce, 0xff, 0x02, 0x84, 0x4e, 0xef, 0x44, 0x45, 0x34, 0xcd,
	0x26, 0x21, 0x2f, 0x90, 0x98, 0x9a, 0xcd, 0x1f, 0x92, 0x3c, 0x3c, 0x13, 0x76, 0x8c, 0xfd, 0x1c,
	0x76, 0xbc, 0x10, 0x50, 0x2b, 0x09, 0xd8, 0x85, 0x7a, 0x64, 0x12, 0xa1, 0x34, 0xaf, 0x23, 0x4a,
	0xd6, 0xda, 0x2a, 0x36, 0xd6, 0x56, 0x11, 0x59, 0xa5, 0x52, 0x58, 0x19, 0x4d, 0x84, 0xe5, 0x9b,
	0x28, 0xac, 0x49, 0xc8, 0x99, 0x65, 0xfb, 0xd0, 0xbc, 0x12, 0x3a, 0x7a, 0xaf, 0x22, 0xfb, 0x86,
	0x37, 0x9d, 0x77, 0x01, 0xe4, 0x83, 0xa3, 0x19, 0x70, 0x70, 0x83, 0x23, 0x93, 0xdd, 0x83, 0x9e,
	0x98, 0x0b, 0x15, 0x8b, 0xab, 0x58, 0x4e, 0x8a, 0xe1, 0xb6, 0x30, 0xa6, 0xbb, 0x70, 0x8c, 0x69,
	0xca, 0x43, 0x68, 0xd0, 0x56, 0xf0, 0xad, 0x81, 0x77, 0xc7, 0xd2, 0x14, 0x6e, 0xf6, 0x08, 0xba,
	0x74, 0x9c, 0x48, 0x1d, 0xcd, 0x8c, 0xd2, 0x96, 0xb7, 0x31, 0x65, 0x65, 0xd5, 0xff, 0xa2, 0xb0,
	0x67, 0x14, 0x95, 0x13, 0x8a, 0x4d, 0x28, 0xe2, 0x49, 0x24, 0x33, 0xab, 0x34, 0x3e, 0x63, 0xde,
	0xc1, 0x79, 0x74, 0xd1, 0xf1, 0xf4, 0x16, 0x3f, 0x1a, 0x43, 0x87, 0x56, 0xb3, 0x58, 0xa3, 0x33,
	0xa8, 0x9f, 0xe3, 0x50, 0x58, 0xc1, 0x8d, 0x02, 0xfa, 0x2b, 0xb6, 0xbf, 0xf7, 0xf9, 0xfb, 0x8f,
	0x2f, 0x95, 0x9e, 0xbf, 0x35, 0x9a, 0xdf, 0x1f, 0xd1, 0xf5, 0x66, 0x27, 0xde, 0xc1, 0xd1, 0x4f,
	0x0f, 0xda, 0x8e, 0x5d, 0x51, 0xf4, 0x12, 0xaa, 0x17, 0xd2, 0xb2, 0xbd, 0x25, 0xea, 0xb7, 0x2f,
	0xb2, 0xcf, 0xd7, 0x1d, 0xee, 0x9d, 0xf9, 0xdb, 0xd8, 0xa4, 0xcd, 0x5a, 0x79, 0x13, 0x7a, 0xd5,
	0x6c, 0x0c, 0x1b, 0xf9, 0x7f, 0x88, 0x2d, 0xa7, 0x95, 0x7e, 0x4d, 0xfd, 0xe5, 0x21, 0xf9, 0x3e,
	0x56, 0xd9, 0x67, 0xfd, 0x52, 0x95, 0xd1, 0xc7, 0xf2, 0xc6, 0x7c, 0x62, 0x4f, 0x16, 0xc2, 0x97,
	0x93, 0x57, 0x6b, 0xed, 0x62, 0xad, 0xae, 0x5f, 0x66, 0x94, 0xab, 0xfe, 0xea, 0x41, 0x87, 0xf4,
	0x16, 0xb2, 0x5f, 0x3a, 0xd9, 0x7c, 0xf9, 0x92, 0x4b, 0xba, 0xff, 0xbe, 0xc3, 0x43, 0xc2, 0x77,
	0xb0, 0x4d, 0x87, 0xe1, 0x74, 0x8b, 0x5f, 0xc9, 0x1d, 0xb7, 0x43, 0xa9, 0xfd, 0x15, 0x7b, 0xf9,
	0x76, 0x8a, 0xfc, 0x13, 0xef, 0xe0, 0xaa, 0x8e, 0x71, 0x0f, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff,
	0x11, 0xec, 0x50, 0x97, 0x15, 0x06, 0x00, 0x00,
}
