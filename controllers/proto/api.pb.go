// Code generated by protoc-gen-go.
// source: controllers/proto/api.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	controllers/proto/api.proto

It has these top-level messages:
	Contact
	MirrorGetRequest
	MirrorGetResponse
	Mirror
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type Mirror_Type int32

const (
	Mirror_OFFER    Mirror_Type = 0
	Mirror_PETITION Mirror_Type = 1
)

var Mirror_Type_name = map[int32]string{
	0: "OFFER",
	1: "PETITION",
}
var Mirror_Type_value = map[string]int32{
	"OFFER":    0,
	"PETITION": 1,
}

func (x Mirror_Type) String() string {
	return proto1.EnumName(Mirror_Type_name, int32(x))
}
func (Mirror_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type Contact struct {
	Id    int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Email string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
}

func (m *Contact) Reset()                    { *m = Contact{} }
func (m *Contact) String() string            { return proto1.CompactTextString(m) }
func (*Contact) ProtoMessage()               {}
func (*Contact) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Contact) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Contact) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Contact) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type MirrorGetRequest struct {
	Limit  int32 `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
	Offset int32 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
}

func (m *MirrorGetRequest) Reset()                    { *m = MirrorGetRequest{} }
func (m *MirrorGetRequest) String() string            { return proto1.CompactTextString(m) }
func (*MirrorGetRequest) ProtoMessage()               {}
func (*MirrorGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MirrorGetRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *MirrorGetRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type MirrorGetResponse struct {
	Mirrors []*Mirror `protobuf:"bytes,1,rep,name=mirrors" json:"mirrors,omitempty"`
}

func (m *MirrorGetResponse) Reset()                    { *m = MirrorGetResponse{} }
func (m *MirrorGetResponse) String() string            { return proto1.CompactTextString(m) }
func (*MirrorGetResponse) ProtoMessage()               {}
func (*MirrorGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MirrorGetResponse) GetMirrors() []*Mirror {
	if m != nil {
		return m.Mirrors
	}
	return nil
}

type Mirror struct {
	Name        string      `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Ipv4        string      `protobuf:"bytes,2,opt,name=ipv4" json:"ipv4,omitempty"`
	Ipv6        string      `protobuf:"bytes,3,opt,name=ipv6" json:"ipv6,omitempty"`
	CreatedAt   int64       `protobuf:"varint,4,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	OnlineSince int64       `protobuf:"varint,5,opt,name=online_since,json=onlineSince" json:"online_since,omitempty"`
	Bandwidth   int64       `protobuf:"varint,6,opt,name=bandwidth" json:"bandwidth,omitempty"`
	Traffic     int64       `protobuf:"varint,7,opt,name=traffic" json:"traffic,omitempty"`
	Location    string      `protobuf:"bytes,8,opt,name=location" json:"location,omitempty"`
	Type        Mirror_Type `protobuf:"varint,9,opt,name=type,enum=proto.Mirror_Type" json:"type,omitempty"`
	Id          int32       `protobuf:"varint,10,opt,name=id" json:"id,omitempty"`
	ContactId   int32       `protobuf:"varint,11,opt,name=contact_id,json=contactId" json:"contact_id,omitempty"`
}

func (m *Mirror) Reset()                    { *m = Mirror{} }
func (m *Mirror) String() string            { return proto1.CompactTextString(m) }
func (*Mirror) ProtoMessage()               {}
func (*Mirror) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Mirror) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Mirror) GetIpv4() string {
	if m != nil {
		return m.Ipv4
	}
	return ""
}

func (m *Mirror) GetIpv6() string {
	if m != nil {
		return m.Ipv6
	}
	return ""
}

func (m *Mirror) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Mirror) GetOnlineSince() int64 {
	if m != nil {
		return m.OnlineSince
	}
	return 0
}

func (m *Mirror) GetBandwidth() int64 {
	if m != nil {
		return m.Bandwidth
	}
	return 0
}

func (m *Mirror) GetTraffic() int64 {
	if m != nil {
		return m.Traffic
	}
	return 0
}

func (m *Mirror) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *Mirror) GetType() Mirror_Type {
	if m != nil {
		return m.Type
	}
	return Mirror_OFFER
}

func (m *Mirror) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Mirror) GetContactId() int32 {
	if m != nil {
		return m.ContactId
	}
	return 0
}

func init() {
	proto1.RegisterType((*Contact)(nil), "proto.Contact")
	proto1.RegisterType((*MirrorGetRequest)(nil), "proto.MirrorGetRequest")
	proto1.RegisterType((*MirrorGetResponse)(nil), "proto.MirrorGetResponse")
	proto1.RegisterType((*Mirror)(nil), "proto.Mirror")
	proto1.RegisterEnum("proto.Mirror_Type", Mirror_Type_name, Mirror_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ContactService service

type ContactServiceClient interface {
	Create(ctx context.Context, in *Contact, opts ...grpc.CallOption) (*Contact, error)
}

type contactServiceClient struct {
	cc *grpc.ClientConn
}

func NewContactServiceClient(cc *grpc.ClientConn) ContactServiceClient {
	return &contactServiceClient{cc}
}

func (c *contactServiceClient) Create(ctx context.Context, in *Contact, opts ...grpc.CallOption) (*Contact, error) {
	out := new(Contact)
	err := grpc.Invoke(ctx, "/proto.ContactService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ContactService service

type ContactServiceServer interface {
	Create(context.Context, *Contact) (*Contact, error)
}

func RegisterContactServiceServer(s *grpc.Server, srv ContactServiceServer) {
	s.RegisterService(&_ContactService_serviceDesc, srv)
}

func _ContactService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Contact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ContactService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactServiceServer).Create(ctx, req.(*Contact))
	}
	return interceptor(ctx, in, info, handler)
}

var _ContactService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ContactService",
	HandlerType: (*ContactServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ContactService_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controllers/proto/api.proto",
}

// Client API for MirrorService service

type MirrorServiceClient interface {
	Get(ctx context.Context, in *MirrorGetRequest, opts ...grpc.CallOption) (*MirrorGetResponse, error)
	Create(ctx context.Context, in *Mirror, opts ...grpc.CallOption) (*Mirror, error)
}

type mirrorServiceClient struct {
	cc *grpc.ClientConn
}

func NewMirrorServiceClient(cc *grpc.ClientConn) MirrorServiceClient {
	return &mirrorServiceClient{cc}
}

func (c *mirrorServiceClient) Get(ctx context.Context, in *MirrorGetRequest, opts ...grpc.CallOption) (*MirrorGetResponse, error) {
	out := new(MirrorGetResponse)
	err := grpc.Invoke(ctx, "/proto.MirrorService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mirrorServiceClient) Create(ctx context.Context, in *Mirror, opts ...grpc.CallOption) (*Mirror, error) {
	out := new(Mirror)
	err := grpc.Invoke(ctx, "/proto.MirrorService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MirrorService service

type MirrorServiceServer interface {
	Get(context.Context, *MirrorGetRequest) (*MirrorGetResponse, error)
	Create(context.Context, *Mirror) (*Mirror, error)
}

func RegisterMirrorServiceServer(s *grpc.Server, srv MirrorServiceServer) {
	s.RegisterService(&_MirrorService_serviceDesc, srv)
}

func _MirrorService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MirrorGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MirrorServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MirrorService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MirrorServiceServer).Get(ctx, req.(*MirrorGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MirrorService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mirror)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MirrorServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MirrorService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MirrorServiceServer).Create(ctx, req.(*Mirror))
	}
	return interceptor(ctx, in, info, handler)
}

var _MirrorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MirrorService",
	HandlerType: (*MirrorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _MirrorService_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _MirrorService_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controllers/proto/api.proto",
}

func init() { proto1.RegisterFile("controllers/proto/api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 504 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x52, 0xcd, 0x6e, 0x13, 0x31,
	0x10, 0xc6, 0x49, 0x36, 0xe9, 0x4e, 0x7e, 0x94, 0x0e, 0xa8, 0xb5, 0x42, 0x11, 0xc1, 0x07, 0x88,
	0x7a, 0x48, 0x44, 0x40, 0x1c, 0x2a, 0x84, 0xa8, 0xa2, 0xb6, 0xca, 0xa1, 0x14, 0x6d, 0x72, 0x8f,
	0xdc, 0x5d, 0xa7, 0x58, 0xda, 0xd8, 0xcb, 0xae, 0x09, 0xea, 0x95, 0x57, 0xe0, 0xce, 0x43, 0xc1,
	0x2b, 0xf0, 0x20, 0x68, 0x6d, 0x27, 0x24, 0x70, 0xda, 0xf9, 0xbe, 0xf9, 0x3c, 0xf3, 0xcd, 0xce,
	0xc0, 0xe3, 0x58, 0x2b, 0x93, 0xeb, 0x34, 0x15, 0x79, 0x31, 0xca, 0x72, 0x6d, 0xf4, 0x88, 0x67,
	0x72, 0x68, 0x23, 0x0c, 0xec, 0xa7, 0x77, 0x72, 0xa7, 0xf5, 0x5d, 0x2a, 0xca, 0xc4, 0x88, 0x2b,
	0xa5, 0x0d, 0x37, 0x52, 0xab, 0xc2, 0x89, 0xd8, 0x04, 0x1a, 0x13, 0xad, 0x0c, 0x8f, 0x0d, 0x76,
	0xa0, 0x22, 0x13, 0x4a, 0xfa, 0x64, 0x10, 0x44, 0x15, 0x99, 0x20, 0x42, 0x4d, 0xf1, 0x95, 0xa0,
	0x95, 0x3e, 0x19, 0x84, 0x91, 0x8d, 0xf1, 0x11, 0x04, 0x62, 0xc5, 0x65, 0x4a, 0xab, 0x96, 0x74,
	0x80, 0xbd, 0x87, 0xee, 0xb5, 0xcc, 0x73, 0x9d, 0x5f, 0x09, 0x13, 0x89, 0xcf, 0x5f, 0x44, 0x61,
	0x4a, 0x65, 0x2a, 0x57, 0xd2, 0xf8, 0x82, 0x0e, 0xe0, 0x11, 0xd4, 0xf5, 0x72, 0x59, 0x08, 0x63,
	0xab, 0x06, 0x91, 0x47, 0xec, 0x2d, 0x1c, 0xee, 0x54, 0x28, 0x32, 0xad, 0x0a, 0x81, 0x2f, 0xa0,
	0xb1, 0xb2, 0x64, 0x41, 0x49, 0xbf, 0x3a, 0x68, 0x8e, 0xdb, 0xce, 0xf4, 0xd0, 0x49, 0xa3, 0x4d,
	0x96, 0xfd, 0xac, 0x40, 0xdd, 0x71, 0x5b, 0xd3, 0x64, 0xc7, 0x34, 0x42, 0x4d, 0x66, 0xeb, 0xd7,
	0x9b, 0x41, 0xca, 0xd8, 0x73, 0x6f, 0xfc, 0x1c, 0x36, 0xc6, 0x27, 0x00, 0x71, 0x2e, 0xb8, 0x11,
	0xc9, 0x82, 0x1b, 0x5a, 0xeb, 0x93, 0x41, 0x35, 0x0a, 0x3d, 0x73, 0x6e, 0xf0, 0x19, 0xb4, 0xb4,
	0x4a, 0xa5, 0x12, 0x8b, 0x42, 0xaa, 0x58, 0xd0, 0xc0, 0x0a, 0x9a, 0x8e, 0x9b, 0x95, 0x14, 0x9e,
	0x40, 0x78, 0xcb, 0x55, 0xf2, 0x55, 0x26, 0xe6, 0x13, 0xad, 0xbb, 0x02, 0x5b, 0x02, 0x29, 0x34,
	0x4c, 0xce, 0x97, 0x4b, 0x19, 0xd3, 0x86, 0xcd, 0x6d, 0x20, 0xf6, 0xe0, 0x20, 0xd5, 0xb1, 0x5d,
	0x0c, 0x3d, 0xb0, 0x8e, 0xb6, 0x18, 0x9f, 0x43, 0xcd, 0xdc, 0x67, 0x82, 0x86, 0x7d, 0x32, 0xe8,
	0x8c, 0x71, 0xef, 0x17, 0x0c, 0xe7, 0xf7, 0x99, 0x88, 0x6c, 0xde, 0xaf, 0x0f, 0xb6, 0xeb, 0x2b,
	0xa7, 0x71, 0x9b, 0x5d, 0xc8, 0x84, 0x36, 0x2d, 0x1f, 0x7a, 0x66, 0x9a, 0xb0, 0xa7, 0x50, 0x2b,
	0x1f, 0x63, 0x08, 0xc1, 0xcd, 0xe5, 0xe5, 0x45, 0xd4, 0x7d, 0x80, 0x2d, 0x38, 0xf8, 0x78, 0x31,
	0x9f, 0xce, 0xa7, 0x37, 0x1f, 0xba, 0x64, 0x3c, 0x83, 0x8e, 0xbf, 0x8c, 0x99, 0xc8, 0xd7, 0x32,
	0x16, 0x78, 0x0e, 0xf5, 0x89, 0xfd, 0x1b, 0xd8, 0xf1, 0x2e, 0xbc, 0xa0, 0xf7, 0x0f, 0x66, 0xc7,
	0xdf, 0x7e, 0xfd, 0xfe, 0x5e, 0x39, 0x64, 0xad, 0xd1, 0xfa, 0xe5, 0xc8, 0xf7, 0x2c, 0xce, 0xc8,
	0xe9, 0xf8, 0x07, 0x81, 0xb6, 0xb3, 0xbe, 0x29, 0x7a, 0x0d, 0xd5, 0x2b, 0x61, 0xf0, 0x78, 0x6f,
	0xae, 0xbf, 0x77, 0xd4, 0xa3, 0xff, 0x27, 0xdc, 0x79, 0xb0, 0x87, 0xb6, 0x49, 0x1b, 0x9b, 0x65,
	0x13, 0x7f, 0x0a, 0xf8, 0x6e, 0xeb, 0x71, 0xff, 0x58, 0x7a, 0xfb, 0x90, 0x1d, 0xd9, 0xc7, 0x5d,
	0xb6, 0xfb, 0xf8, 0x8c, 0x9c, 0xde, 0xd6, 0xad, 0xea, 0xd5, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x1b, 0xf3, 0x3d, 0xe8, 0x5a, 0x03, 0x00, 0x00,
}
