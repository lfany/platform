syntax = "proto3";

package proto;

import "google/api/annotations.proto";

service ContactService {
  rpc Create(Contact) returns (ContactResponse) {
    option (google.api.http) = {
      post: "/v1/contacts",
      body: "*"
    };
  }
  rpc Update(Contact) returns (ContactResponse) {
    option (google.api.http) = {
      put: "/v1/contacts/self",
      body: "*"
    };
  }
  rpc Get(Contact) returns (ContactResponse) {
    option (google.api.http) = {
      get: "/v1/contacts/self"
    };
  }
  rpc Authorize(AuthorizeContactRequest) returns (ContactResponse) {
    option (google.api.http) = {
      post: "/v1/contacts/auth",
      body: "*"
    };
  }
}

service MirrorService {
  rpc Get(ListRequest) returns (MirrorGetResponse) {
    option (google.api.http) = {
      get: "/v1/mirrors"
    };
  }
  rpc Find(MirrorFindRequest) returns (Mirror) {
    option (google.api.http) = {
      get: "/v1/mirrors/self"
    };
  }
  rpc FindById(Mirror) returns (Mirror) {
    option (google.api.http) = {
      get: "/v1/mirrors/{id}"
    };
  }
  rpc UpdateById(Mirror) returns (Mirror) {
    option (google.api.http) = {
      post: "/v1/mirrors/{id}",
      body: "*"
    };
  }
  rpc Connect(ConnectServiceAndMirror) returns (Mirror) {
    option (google.api.http) = {
      put: "/v1/mirrors/{mirror_id}/endpoint/{endpoint_id}"
    };
  }
  rpc Create(Mirror) returns (Mirror) {
    option (google.api.http) = {
      post: "/v1/mirrors",
      body: "*"
    };
  }
}

service ServiceService {
  rpc Get(ServiceGetRequest) returns (ServiceGetResponse) {
    option (google.api.http) = {
      get: "/v1/services"
    };
  }
  rpc Update(Service) returns (Service) {
    option (google.api.http) = {
      post: "/v1/services/{id}",
      body: "*"
    };
  }
  rpc Find(Service) returns (Service) {
    option (google.api.http) = {
      get: "/v1/services/{id}",
    };
  }
  rpc Create(Service) returns (Service) {
    option (google.api.http) = {
      post: "/v1/services",
      body: "*"
    };
  }
}

message ContactResponse {
  string token = 1;
  Contact contact = 2;
}

message AuthorizeContactRequest {
  string email = 1;
  string password = 2;
}

message ConnectServiceAndMirror {
  int32 mirror_id = 1;
  int32 endpoint_id = 2;
}

message MirrorFindRequest {
  string client_token = 1;  
}

message ListRequest {
  int32 limit = 1;
  int32 offset = 2;
}

message MirrorGetResponse {
  repeated Mirror mirrors = 1;
}

message ServiceGetRequest {
  int32 limit = 1;
  int32 offset = 2;
}

message ServiceGetResponse {
  repeated Service services = 1;  
}

message Contact {
  int32 id = 1;
  string name = 2;
  string email = 3;
  string password = 4;
  bool admin = 5;
  repeated Mirror mirrors = 6;
}

message Service {
  int32 id = 1;
  string name = 2;
  int64 storage = 3;
  repeated string files = 4;
}

message Mirror {
  int32 id = 1;
  int32 contact_id = 2;
  string ipv4 = 3;
  string ipv6 = 4;
  string name = 5;
  string domain = 6;
  string client_token = 7;
  int64 created_at = 8;
  int64 bandwidth = 9;
  int64 traffic = 10;
  int64 available_storage = 11;
  Service service = 12;
  Mirror service_endpoint = 13;
  string local_destination = 14;
  int64 storage = 15;
}

